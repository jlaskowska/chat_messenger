import 'dart:async';

import 'package:flutter/material.dart';

/// This class is generated by the flappy_translator package
/// Please do not change anything manually in this file, instead re-generate it when changes are available
class AppLocalizations {
  static String get appTitle => _getText('appTitle');

  static String get signinScreenNickname => _getText('signinScreenNickname');

  static String get signinScreenSigininButtonLabel =>
      _getText('signinScreenSigininButtonLabel');

  static String get adaptiveErrorDialogTitle =>
      _getText('adaptiveErrorDialogTitle');

  static String get adaptiveErrorDialogContent =>
      _getText('adaptiveErrorDialogContent');

  static String get adaptiveErrorDialogButtonLabel =>
      _getText('adaptiveErrorDialogButtonLabel');

  static String get chatroomLogoutButton => _getText('chatroomLogoutButton');

  static String get chatroomSendMessageButton =>
      _getText('chatroomSendMessageButton');

  static String get chatTextFieldSendMessageHintText =>
      _getText('chatTextFieldSendMessageHintText');

  static Map<String, String> _localizedValues;

  static Map<String, String> _enValues = {
    'appTitle': 'Chat Messenger',
    'signinScreenNickname': 'Nickname',
    'signinScreenSigininButtonLabel': 'Signin',
    'adaptiveErrorDialogTitle': 'Error',
    'adaptiveErrorDialogContent': 'Something went wrong. Please try again.',
    'adaptiveErrorDialogButtonLabel': 'Try Again',
    'chatroomLogoutButton': 'Logout',
    'chatroomSendMessageButton': 'Send',
    'chatTextFieldSendMessageHintText': 'Type your message here.',
  };

  static Map<String, String> _deValues = {
    'appTitle': '[ Chat Messenger üÜößẞÖ ]',
    'signinScreenNickname': '[ Nickname Öäßü ]',
    'signinScreenSigininButtonLabel': '[ Signin ßßÜ ]',
    'adaptiveErrorDialogTitle': '[ Errör ÜÄÄ ]',
    'adaptiveErrorDialogContent':
        '[ Sömething went wröng. Please try again. üẞäÄßöääẞÖÖä ]',
    'adaptiveErrorDialogButtonLabel': '[ Try Ägain öÖäÜÖ ]',
    'chatroomLogoutButton': '[ Lögöüt ääÄ ]',
    'chatroomSendMessageButton': '[ Send ÖÜ ]',
    'chatTextFieldSendMessageHintText': '[ Type yöür message here. ÜöüÄßÖÜ ]',
  };

  static Map<String, Map<String, String>> _allValues = {
    'en': _enValues,
    'de': _deValues,
  };

  AppLocalizations(Locale locale) {
    _locale = locale;
    _localizedValues = null;
  }

  static Locale _locale;

  static String _getText(String key) {
    return _localizedValues[key] ?? '** $key not found';
  }

  static Locale get currentLocale => _locale;

  static String get currentLanguage => _locale.languageCode;

  static Future<AppLocalizations> load(Locale locale) async {
    final translations = AppLocalizations(locale);
    _localizedValues = _allValues[locale.toString()];
    return translations;
  }
}

class AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const AppLocalizationsDelegate();

  static final Set<Locale> supportedLocals = {
    Locale('en'),
    Locale('de'),
  };

  @override
  bool isSupported(Locale locale) => supportedLocals.contains(locale);

  @override
  Future<AppLocalizations> load(Locale locale) => AppLocalizations.load(locale);

  @override
  bool shouldReload(AppLocalizationsDelegate old) => false;
}
