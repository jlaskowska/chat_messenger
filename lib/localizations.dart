import 'dart:async';

import 'package:flutter/material.dart';

/// This class is generated by the flappy_translator package
/// Please do not change anything manually in this file, instead re-generate it when changes are available
class AppLocalizations {
  static String get appTitle => _getText('appTitle');

  static String get signinScreenNickname => _getText('signinScreenNickname');

  static String get signinScreenSigininButtonLabel =>
      _getText('signinScreenSigininButtonLabel');

  static String get signinScreenAdaptiveErrorDialogTitle =>
      _getText('signinScreenAdaptiveErrorDialogTitle');

  static String get signinScreenAdaptiveErrorDialogContent =>
      _getText('signinScreenAdaptiveErrorDialogContent');

  static String get signinScreenAdaptiveErrorDialogButtonLabel =>
      _getText('signinScreenAdaptiveErrorDialogButtonLabel');

  static Map<String, String> _localizedValues;

  static Map<String, String> _enValues = {
    'appTitle': 'Chat Messenger',
    'signinScreenNickname': 'Nickname',
    'signinScreenSigininButtonLabel': 'Signin',
    'signinScreenAdaptiveErrorDialogTitle': 'Error',
    'signinScreenAdaptiveErrorDialogContent':
        'Something went wrong. Please try again.',
    'signinScreenAdaptiveErrorDialogButtonLabel': 'Try Again',
  };

  static Map<String, String> _deValues = {
    'appTitle': '[ Chat Messenger ßẞÜẞßÄ ]',
    'signinScreenNickname': '[ Nickname öÄẞä ]',
    'signinScreenSigininButtonLabel': '[ Signin äÄä ]',
    'signinScreenAdaptiveErrorDialogTitle': '[ Errör üÖÖ ]',
    'signinScreenAdaptiveErrorDialogContent':
        '[ Sömething went wröng. Please try again. ÖßßÜäöüÜüẞüü ]',
    'signinScreenAdaptiveErrorDialogButtonLabel': '[ Try Ägain äÄüää ]',
  };

  static Map<String, Map<String, String>> _allValues = {
    'en': _enValues,
    'de': _deValues,
  };

  AppLocalizations(Locale locale) {
    _locale = locale;
    _localizedValues = null;
  }

  static Locale _locale;

  static String _getText(String key) {
    return _localizedValues[key] ?? '** $key not found';
  }

  static Locale get currentLocale => _locale;

  static String get currentLanguage => _locale.languageCode;

  static Future<AppLocalizations> load(Locale locale) async {
    final translations = AppLocalizations(locale);
    _localizedValues = _allValues[locale.toString()];
    return translations;
  }
}

class AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const AppLocalizationsDelegate();

  static final Set<Locale> supportedLocals = {
    Locale('en'),
    Locale('de'),
  };

  @override
  bool isSupported(Locale locale) => supportedLocals.contains(locale);

  @override
  Future<AppLocalizations> load(Locale locale) => AppLocalizations.load(locale);

  @override
  bool shouldReload(AppLocalizationsDelegate old) => false;
}
